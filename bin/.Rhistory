x <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/AG_65_180613/QC/qc_lrrsd.csv',header=T)
plot(x)
plot(x$LRR_SD)
plot.density(x$LRR_SD)
density(x )
y <-density(x$LRR_SD)
plot(y)
x <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/AG_65_180613/QC/qc_lrrsd.csv',header=T)
x <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/AG_65_180613/QC/qc_lrrsd.csv',header=T)
y <-density(x$NumCNV)
plot(y)
y <-density(x)
plot(y)
x <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/AG_65_180613/QC/sampleall.goodcnv',header=T)
x <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/AG_65_180613/QC/sampleall.goodcnv',header=T)
y <-density(x$snp)
x <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/AG_65_180613/QC/sampleall.goodcnv',header=T)
y <-density(x$snp)
head(x)
x <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/AG_65_180613/QC/files/sampleall.goodcnv',header=T)
x <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/AG_65_180613/QC/sampleall.goodcnv',header=T)
x <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/AG_65_180613/QC/files/sampleall.goodcnv',header=T)
x <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/AG_65_180613/QC/files/sampleall.goodcnv',header=T)
head(x)
y <-density(x$snp)
plot(y)
x <-read.table('/media/Sam_drive/Sam_BS_analysis/Canary/files/test.canary_calls',header=T,row.names=1)
transpose(x)
t(x\)
t(x)
y <-t(x)
getwd()
setwd("/home/igib")
getwd()
write.table("transposed.txt",y)
write.table()
write.table(y)
t.txt<-write.table(y)
write.table(y,file="t.txt",sep="\t",, row.names = TRUE,)
write.table(y,file="t.txt",sep="\t",, row.names = TRUE,col.names=TRUE)
x <-read.table('/media/Sam_drive/Ayurgenomics_analysis/Birdsuite/MDS/AG_65.canary_calls.txt',header=T,row.names=1)
y <-t(x)
y
write.table(y,file="/media/Sam_drive/Ayurgenomics_analysis/Birdsuite/MDS/t.txt",sep="\t",, row.names = TRUE,col.names=TRUE)
library(MASS)
d <- dist(y)
fit <- isoMDS(d, k=2)
fit
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, labels = row.names(y), cex=.7)
text(x, y, labels = row.names(y), cex=.7)
text(x, y, labels = row.names(y), cex=.7)
text(x, y, labels = row.names(y), cex=.7)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, labels = row.names(y), cex=.7)
x <-read.table('/media/Sam_drive/Ayurgenomics_analysis/Birdsuite/MDS/t',header=T,row.names=1)
x <-read.table('/media/Sam_drive/Ayurgenomics_analysis/Birdsuite/MDS/t.txt',header=T,row.names=1)
d <- dist(x)
fit <- isoMDS(d, k=2)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, labels = row.names(y), cex=.7)
x <-read.table('/media/Sam_drive/Ayurgenomics_analysis/Birdsuite/MDS/t.txt',header=T,row.names=1)
x
head(x)
d <- dist(x)
fit <- cmdscale(d,eig=TRUE, k=2)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="MetricMDS", type="n")
text(x, y, labels = row.names(mydata), cex=.7)
text(x, y, labels = row.names(x), cex=.7)
text(x, y, cex=.7)
fit <- isoMDS(x, k=2)
x <-read.table('/media/Sam_drive/Ayurgenomics_analysis/Birdsuite/MDS/t.txt',header=T,row.names=1)
library(MASS)
d <- dist(x)
fit <- isoMDS(x, k=2)
fit <- isoMDS(d, k=2)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, cex=.8)
x <-plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main= "MDS Canary AG65", type"n")
x <-plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main= "MDS Canary AG65", type="n")
text(x,y,cex=0.7)
text(x,y,cex=.7)
text(x,y, cex=.8)
text(x, y, cex=.8)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS AG65 Canary", type="n")
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="NM MDS AG65 Canary", type="n")
text(x, y, cex=.8)
pdf('plot.pdf')
plot(x,y)
dev.off()
pdf('nonmetricmds_ag65_canary.pdf',)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="NM MDS AG65 Canary", type="n")
pdf(plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="NM MDS AG65 Canary", type="n"))
text(x, y, cex=.8)
text(x, y)
text(x, y, cex=.8)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="NM MDS AG65 Canary", type="n"))
text(x, y, cex=.8)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="NM MDS AG65 Canary", type="n")
text(x, y, cex=.8)
text(x, y, cex=.8)
text(x, y, cex=.7)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="NM MDS AG65 Canary", type="n")
text(x, y, cex=.7)
x <-read.table('/media/Sam_drive/Ayurgenomics_analysis/Birdsuite/MDS/t.txt',header=T,row.names=1)
library(MASS)
d <- dist(x)
fit <- isoMDS(x, k=2)
fit <- isoMDS(d, k=2)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
+   main="Nonmetric MDS_canary_AG65", type="n")
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
+   main="Nonmetric MDS canaryAG65", type="n")
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
+   main="Nonmetric MDS", type="n")
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
+   main="Nonmetric MDS", type="n")
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
+   main="Nonmetric MDS", type="n")
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, cex=.8)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
x <-read.table('/media/Sam_drive/Ayurgenomics_analysis/Birdsuite/MDS/t.txt',header=T,row.names=1)
d <- dist(x)
x <- fit$points[,1]
fit <- isoMDS(d, k=2)
library(MASS)
fit <- isoMDS(d, k=2)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, cex=.8)
dev.copy(pdf,'plot.pdf')
dev.off()
source(    source("http://bioconductor.org/biocLite.R"))
source("http://bioconductor.org/biocLite.R")
biocLite("lumi")
require(lumi)
source("http://bioconductor.org/biocLite.R")
biocLite("lumi")
install.package('hdrcde')
install.packages('hdrcde')
install.packages('hdrcde')
install.packages('/home/igib/Downloads/cnvpack_0.4.6.tar.gz' ,repos = NULL, type="source")
install.packages("gap", repos="http://cran.r-project.org")
install.packages('/home/igib/Downloads/cnvpack_0.4.6.tar.gz' ,repos = NULL, type="source")
library(cnvpack)
require(cnvpack)
getwd()
out<-read.cnv(filename='/media/Sam_drive/Ayurgenomics_analysis/Penncnv/AG_65_180613/QC/sampleall.goodcnv',conf=FALSE,annotated=FALSE,input="penncnv",sep="\t")
head(out)
head(out)
ann <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/cnvpack/gen.infop2.txt', sep = "\t",header=T )
head(ann)
head(ann$Name)
head(ann$Chr.num)
head(ann$Chromosome)
head(ann$Position)
head(out)
pheno <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/cnvpack/sex_file' , sep = "\t",header=T )
pheno
pheno <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/cnvpack/pheno.txt' , sep = "\t",header=T )
pheno
cnvr<-setreg(out,anno.list = ann,pheno.data= pheno,high.conf = NA,LIM = 2,method = "COVER", cnv.abnormality = "both")
cnvr<-setreg(out, anno.list = ann, pheno.data= pheno, high.conf = NA, LIM = 2, method = "COVER", cnv.abnormality = "both")
cnvr
cnvr<-setreg(out, pheno.data= pheno, high.conf = NA, LIM = 2, method = "COVER", cnv.abnormality = "both")
help(setreg)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
cnvr<-setreg(out,annotation = ann, pheno.data= pheno, high.conf = NA, LIM = 2, method = "COVER", cnv.abnormality = "both")
cnvr
cnvr<-setreg(out,annotation = ann, pheno.data= pheno, high.conf = NA, LIM = 3, method = "COVER", cnv.abnormality = "both")
cnvr<-setreg(out,annotation = ann, pheno.data= pheno, high.conf = NA, LIM = 3, method = "COVER", cnv.abnormality = "both")
clear()
help(setreg)
pheno <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/cnvpack/pheno.txt' , sep = "\t",header=T )
pheno
pheno <- read.table('/media/Sam_drive/Ayurgenomics_analysis/Penncnv/cnvpack/pheno1.txt' , sep = "\t",header=T )
pheno
cnvr<-setreg(out,annotation = ann, pheno.data= pheno, high.conf = NA, LIM = 3, method = "COMPOSITE", cnv.abnormality = "both")
cnvr<-setreg(out,annotation = ann, pheno.data= pheno, high.conf = NA, LIM = 4, method = "COMPOSITE", cnv.abnormality = "both")
cnvpack
library(cnvpack)
require(cnvpack)
cnvpack
cnvr<-setreg(out,annotation = ann, pheno.data= pheno, high.conf = NA, LIM = 3, method = "COMPOSITE", cnv.abnormality = "both")
setreg
setreg
help(setreg)
cnvr<-setreg(out,annotation = ann, pheno.data= pheno, high.conf = NA, LIM = 3, method = "COMPOSITE", cnv.abnormality = "separate")
setreg()
help(setreg)
cnvr<-setreg(out,annotation = ann, pheno.data= pheno, high.conf = NA, LIM = 3, method = "COMPOSITE", cnv.abnormality = "separate")
library(gap)
library(limma)
cnvr<-setreg(out,annotation = ann, pheno.data= pheno, high.conf = NA, LIM = 3, method = "COMPOSITE", cnv.abnormality = "separate"
installed.packages(cnvpack)
installed.packages()
path.package(cnvpack, quiet = FALSE)
path.package(cnvpack)
f2seg
fseg
help(fseg)
?fseg
??fseg
data(pheno)
data(ann)
cnvr<-setreg(out,annotation = ann, pheno.data= pheno, high.conf = NA, LIM = 3, method = "COMPOSITE", cnv.abnormality = "separate")
ls()
head(out)
install.packages('/home/igib/Downloads/cnvpack_0.4.6.tar.gz')
cnvr<-setreg(out,annotation = ann, pheno.data= pheno, high.conf = NA, LIM = 3, method = "COMPOSITE", cnv.abnormality = "separate")
require(cnvpack)
cnvr<-setreg(out,annotation = ann, pheno.data= pheno, high.conf = NA, LIM = 3, method = "COMPOSITE", cnv.abnormality = "separate")
install.packages('/home/igib/Downloads/cnvpack_0.4.6.tar.gz', lib = "/usr/lib/R/site-library")
cnvr<-setreg(out,annotation = ann, pheno.data= pheno, high.conf = NA, LIM = 3, method = "COMPOSITE", cnv.abnormality = "separate")
help(MASS)
library(MASS)
help('isoMDS')
library(mass)
library(MASS)
View(pheno)
?con
??con
x <- read.csv('populationclimate.txt')
setwd('~/pawan/climate_git/AWE/bin/')
y<-read.table('../data/adr_inp.txt')
x<-read.csv('../data/adr_inp_hdr (copy)')
x<-x[10:68,]
names(x)
68-9
y<-y[,9:67]
length(names(y))
u <- x$X.2
u<-as.character(u)
length(u)
u
indx <- which(u=='y')
indx
y.indx <- y[,indx]
length(indx)
length(u)
x<-read.csv('../data/adr_inp_hdr (copy)')
dim(x)
x[1:4,]
x[10,]
x[9,]
x[8,]
y<-read.table('../data/adr_inp.txt')
dim(y)
y<-y[,8:67]
x<-read.csv('../data/adr_inp_hdr (copy)')
x<-x[9:68,]
length(x)
length(x[,1])
length(y[,1])
length(y[1,])
u <- x$X.2
u<-as.character(u)
length(u)
length(names(y))
indx <- which(u=='y')
length(indx)
y.indx <- y[,indx]
write.table(y.indx,file='adr_inp_awe_bay',sep='\t',eol='\t \n', row.names=FALSE, col.names=FALSE)
write.table(y.indx,file='../data/adr_inp_awe',sep='\t',eol='\t \n', row.names=FALSE, col.names=FALSE)
rm(list=ls())
y <- read.table('../data/adr_inp_awe')
dim(y)
y[1:3]
y[1:3,]
x <- read.table('../data/populationclimate.txt')
x <- read.csv('../data/populationclimate.txt')
names(x)
a <- read.csv('../data/adr_inp_hdr (copy)')
names(a)
a[1:3,]
dim(a)
a <- a[9:68,]
dim(a)
a[1:3]
a[1:3,]
length(a[,1])
indx <- which(as.character(a$X.2))=='y')
indx <- which((as.character(a$X.2))=='y')
length(indx)
dim(x)
x[1:3,]
x <- x[-1,]
dim(x)
x[1:3.]
x[1:3,]
x <- x[indx,]
pop <- x$Size
dim(x)
dim(x); length(pop)
dim(x); length(pop); dim(y)[1]
dim(x); length(pop); dim(y)[2]
dim(x)[2] ; length(pop); dim(y)[2]
dim(x)[1] ; length(pop); dim(y)[2]
y <- as.matrix(y)
if(class(y[1,1])=='numeric'){print('yes')}
c <- matrix(0,nrow=(dim(y)[1]*2),ncol=dim(y)[2])
dim(y)[1]
rand <- sample(1:dim(y)[1], 10000)
y <- y[rand,]
dim(y)
c <- matrix(0,nrow=(dim(y)[1]*2),ncol=dim(y)[2])
# Same freqs in odd rows
for (i in 1:dim(y)[1]){
c[((2*i)-1),] <- y[i,]
}
names(x)
name<-x$Population.Name; name<-as.character(name)
b<-sweep(c, MARGIN=2, pop, '*')
b[1:4,]
c[1:4,]
b <- round(b)
b[1:4,]
# Place the 1-pop in even rows
# 1-freqs in even rows
for (i in 1:((dim(a)[1])/2)){
a[(2*i),] <- (pop - a[((2*i)-1),])
}
# 1-freqs in even rows
for (i in 1:((dim(b)[1])/2)){
b[(2*i),] <- (pop - b[((2*i)-1),])
}
length(b[1,]
)
for(i in 1:dim(b)[1]){
if(all.equal(b[i,],rep(0,length(b[1,])))==TRUE){print(c(i,'problem'))}
}
rand(12659)
rand[12659]
which(rand=12659)
which(rand==12659)
dim(b)[1]
12660/2
rand[6330]
rand[6330]<-123527
y <- read.table('../data/adr_inp_awe')
y <- as.matrix(y)
if(class(y[1,1])=='numeric'){print('yes')}
y <- y[rand,]
c <- matrix(0,nrow=(dim(y)[1]*2),ncol=dim(y)[2])
for (i in 1:dim(y)[1]){
c[((2*i)-1),] <- y[i,]
}
name<-x$Population.Name; name<-as.character(name)
b<-sweep(c, MARGIN=2, pop, '*')
b <- round(b)
for (i in 1:((dim(b)[1])/2)){
b[(2*i),] <- (pop - b[((2*i)-1),])
}
for(i in 1:dim(b)[1]){
if(all.equal(b[i,],rep(0,length(b[1,])))==TRUE){print(c(i,'problem'))}
}
write.table(a, file="../data/inpforbayawe", quote = FALSE, sep = "\t", eol = "\t \n", row.names = FALSE, col.names = FALSE)
write.table(b, file="../data/inpforbayawe", quote = FALSE, sep = "\t", eol = "\t \n", row.names = FALSE, col.names = FALSE)
dim(b)
y <- read.csv('../results/covariance matrices/covawe5k', header=FALSE, sep = '\t',quote=NULL)
dim(y)
y<-y[,1:33]
class(y)
y<-as.matrix(y)
class(y[1,1])
range(y)
hist(y)
z<-cov2cor(y)
a <- read.csv('../data/populationclimate.txt')
b <- read.csv('../data/adr_inp_hdr (copy)')
names(b)
b[1:3,]
b[8:11,]
b[9:length(b[,1]),]
name <- a$Population.Name[2:61]
b1<-b[9:length(b[,1]),]
dim(b1)[1]==length(name)
indx<-which(as.character(b1$X.2)=='y')
length(indx)
length(indx)==dim(z)[1]
rownames(z)<-colnames(z)<-name[indx]
hist(z)
png(filename='../results/covariance matrices/heatmap_clust_AWE5k',width=4,height=4,units='in',res=600,pointsize=7)
heatmap(z)
dev.off()
diag(z)
dim(z)
view(z)
View(z)
?heatmap
heatmap(z,revC=TRUE)
heatmap(z,revC=TRUE,ColSideColors=1:33)
col<-1:33
heatmap(z,revC=TRUE,ColSideColors=col)
ncol(z)
col <- as.character(col)
heatmap(z,revC=TRUE,ColSideColors=col)
heatmap(z,revC=TRUE,ColSideColors=col,main="Population Clustering AWE: NULL MODEL",xlab="AWE Populations",ylab="AWE Populations")
heatmap(z,revC=TRUE,ColSideColors=col,main="Population Clustering AWE: NULL MODEL",xlab="AWE Populations",ylab="AWE Populations",verbose=TRUE)
heatmap.2(z,revC=TRUE,ColSideColors=col,main="Population Clustering AWE: NULL MODEL",xlab="AWE Populations",ylab="AWE Populations",verbose=TRUE)
library(gplot)
library(gplots)
install.packages("gplots")
library(gplots)
heatmap.2(z,revC=TRUE,ColSideColors=col,main="Population Clustering AWE: NULL MODEL",xlab="AWE Populations",ylab="AWE Populations",verbose=TRUE)
heatmap.2(z,revC=TRUE,ColSideColors=col,main="Population Clustering AWE: NULL MODEL",xlab="AWE Populations",ylab="AWE Populations")
heatmap.2(z,revC=TRUE,ColSideColors=col,main="Population Clustering AWE: NULL MODEL",xlab="AWE Populations",ylab="AWE Populations")
heatmap.2(z)
heatmap.2(z)
heatmap.2(z)
heatmap.2(z)
heatmap(z,revC=TRUE,ColSideColors=col,main="Population Clustering AWE: NULL MODEL",xlab="AWE Populations",ylab="AWE Populations")
heatmap(z,revC=TRUE,ColSideColors=col,main="Population Clustering AWE: NULL MODEL",xlab="AWE Populations",ylab="AWE Populations")
detach(gplots)
detach('package:gplots')
heatmap(z,revC=TRUE,ColSideColors=col,main="Population Clustering AWE: NULL MODEL",xlab="AWE Populations",ylab="AWE Populations")
heatmap(z)
remove.packages('gplot2')
remove.packages('gplots')
remove.packages('gplots')
heatmap(z)
q()
